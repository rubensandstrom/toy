typedef dynamic_array: struct {
  capacity: int;
  size: int;
  growth_factor: float;
  array: @?T;
}; 

initiate_dynamic_array: ( 
  dynarr: @dynamic_array, 
  initial_capacity: int, 
  growth_factor: float, 
  element: ?T
  ) : {

  .capacity = initial_capacity;
  .size = 0;
  .growth_factor = growth_factor;
  .array: @T = (@T)malloc(.array, .capacity * sizeof(type))

} 

push: ( dynarr: @dynamic_array, element: ?T ) : {
  
  if .size == .capacity {
    .capacity *= growth_factor;
    .array: @T = (@T)realloc(.array, .capacity * sizeof(T));
  }
  .array[.size] = element;
  .size += 1;
  
}

pop: ( dynarr: ^dynamic_array ) => ( element: ?T ) : {

  .size -= 1;
  if .size < (int)(.capacity / ( .growth_factor * 1.1 )) {
    .capacity /= .grothfactor;
    .array: @T = (@T)realloc(.array, .capacity * sizeof(T));
  }
  return .array[.size];

}
